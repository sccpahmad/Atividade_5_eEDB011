name: airflow-atividade5

x-airflow-common: &airflow-common
  image: apache/airflow:2.9.2-python3.11
  environment:
    # Airflow básico
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session"
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "true"
    # >>> Forçar Postgres como metadado (evita SQLite)
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow

    # AWS via seu perfil SSO (montado abaixo)
    AWS_PROFILE: lab-temp
    AWS_DEFAULT_REGION: us-east-1

    # Pacotes extras (mínimo p/ DQ rodar)
    _PIP_ADDITIONAL_REQUIREMENTS: >
      boto3==1.34.106
      pymysql==1.1.1
      unidecode==1.3.8
      fuzzywuzzy[speedup]==0.18.0
      great-expectations==0.18.*
      pyarrow>=14,<17

  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - "C:/Users/ahmad/.aws:/home/airflow/.aws:ro"   # credenciais AWS do Windows

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -lc
      - |
        set -e
        echo "Using DB: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}"
        airflow db migrate
        airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.org || true
    depends_on:
      postgres:
        condition: service_healthy

  webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  scheduler:
    <<: *airflow-common
    command: scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully

volumes:
  postgres-db-volume: {}